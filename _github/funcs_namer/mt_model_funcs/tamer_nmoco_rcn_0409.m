function [ fit, x, pcg_out, ktheta] = tamer_nmoco_rcn_0409(sens, kdata, ...
    U , recon_vxls, msk_vxls, xprev, kfilt)
%
% TAMER no motion correction reconstruction
%
% INPUTS:
%
%   sens: sensitivity maps
%   kdata: k-space data
%   U: undersampling matrix
%   recon_vxls: voxels to reconstruct. Can be either a set of target voxels
%               or the full mask to solve for the whole volume
%   msk_vxls: voxels of mask
%   xprev: previous estimate of the image x
%   kfilt: k-space weighting filter on the L2 norm
%
% OUTPUTS:
%
%   fit: data consistency fit
%   x: output image
%   pcg_out: pcg call outputs
%   ktheta: kspace generated by image x and motion theta

%%                             Precomputations                           %%

%%% Currently hardcoded values
iters = 20;
lambda = 0;

[nlin, ncol, nsli, ~] = size(U);
fixed_vxls = setdiff(msk_vxls,recon_vxls);
kdata = kdata .*U;


%% pcg
xs_v_f = xprev(fixed_vxls);
Ffxf = E(xs_v_f,U,sens,fixed_vxls);
EHfEfxf = EH(Ffxf,U,sens,recon_vxls);
RHS = EH(kdata,U,sens,recon_vxls) - EHfEfxf; %RHS-"right hand side"

if (~isempty(xprev))
    [xs_v_t, f, rr, it] = pcg(@(x)...
        EHE(x,U,sens,lambda,recon_vxls), RHS, 1e-3, iters, [], [],...
        reshape(xprev(recon_vxls),numel(recon_vxls),1));
else
    [xs_v_t, f, rr, it] = pcg(@(x)...
        EHE(x,U,sens,lambda,recon_vxls), RHS, 1e-3, iters);
end
pcg_out = [f, rr, it];

%%                   Evaluate Forward Model                              %%

xs_v_vol = zeros(nlin,ncol,nsli);
xs_v_vol(fixed_vxls) = xs_v_f; xs_v_vol(recon_vxls) = xs_v_t;
xs_v_all = xs_v_vol(msk_vxls);

%% full reconstructed image
x = zeros(nlin,ncol,nsli);
x(msk_vxls) = xs_v_all;

%% project back
ktheta = E(xs_v_all,U,sens,msk_vxls);

% weight (filter) the kspace data
kdata_filt = kdata .* kfilt;
kmodel_filt = ktheta .* kfilt;

fit = norm(kmodel_filt(:)-kdata_filt(:))/norm(kdata_filt(:));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%        E - encoding forward model       %%%%%%%%%%%%%%%%%%%%%%%%%%%
function [kdata] = E(x,U,sens,recon_vxls)

%% precomputations
[nlin, ncol, nsli, ncha] = size(U);


temp_vol = zeros(nlin,ncol,nsli);
temp_vol(recon_vxls) = x;

% C
Cx = sens .* repmat(temp_vol,1,1,1,ncha);

% Fen
FenCx = fftshift(fftshift(fft2(...
    ifftshift(ifftshift(Cx,1),2) ) ,1),2);

% Uss
UFenCx = U .* FenCx;


kdata = UFenCx;

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%      EH - E Hermitian (E*), reverse model    %%%%%%%%%%%%%%%%%%%
function [imdata] = EH(k,U,sens,recon_vxls)

Usk = U .* k;
FsUsk = fftshift(fftshift( ifft2(ifftshift(ifftshift(Usk,1),2)) ,1),2);
CsFsUsk = sum(conj(sens) .* FsUsk,4);
imdata = CsFsUsk(recon_vxls);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%    E*E, used when solving normal equations                  %%%%%%%%%%
function [output] = EHE(x,U,sens,lambda,recon_vxls)

Ex = E(x,U,sens,recon_vxls);
EHEx = EH(Ex,U,sens,recon_vxls);
output = EHEx + lambda;

end




